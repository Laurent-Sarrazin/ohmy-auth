{"name":"ohmy-auth","tagline":"OAuth made easy for PHP","body":"### Intro\r\nohmy-auth (Oma) is a library that reduces OAuth to its most basic form. This is ***the*** library for developers who don't want to outsource their OAuth logic to a web-service or rely on a library adapter.\r\n\r\nLet's start with a basic example..\r\n```php\r\n# use your preferred autoloader\r\nuse ohmy\\Auth1;\r\nAuth1::init(2)\r\n     ->set('key', 'key')\r\n     ->set('secret', 'secret')\r\n     ->request('http://term.ie/oauth/example/request_token.php')\r\n     ->access('http://term.ie/oauth/example/access_token.php')\r\n     ->GET('http://term.ie/oauth/example/echo_api.php')\r\n     ->then(function($data) {\r\n           var_dump($data);\r\n      });\r\n```\r\nIn just 11 lines, the above code performed a 2-legged OAuth 1.0a exchange with [term.ie](http://term.ie/oauth/example/), made an API request to echo_api.php, and then dumped the results. \r\n\r\nOma uses a pseudo-[promise pattern](http://en.wikipedia.org/wiki/Futures_and_promises), which is how the functions are chained to each other. Once ```request()```, ```authorize()```, or ```access()``` is called, ohmy-auth will proceed to the next stage of the OAuth flow, preventing someone from inadvertently performing a leg more than once.   \r\n\r\n```then()```, ```catch()```, and ```finally()``` are standard promise functions that can be inserted at any time of the flow. This is useful if you want to step in and take control of things without interrupting the entire flow.\r\n\r\nFor example, what if you wanted to save the access token to a database? Easy, just throw a ```then()``` after the ```access()``` call:\r\n```php\r\n# use your preferred autoloader\r\nuse ohmy\\Auth1;\r\nAuth1::init(2)\r\n     ->set('key', 'key')\r\n     ->set('secret', 'secret')\r\n     ->request('http://term.ie/oauth/example/request_token.php')\r\n     ->access('http://term.ie/oauth/example/access_token.php')\r\n     ->then(function($data) use($user){\r\n         $user->save('access_token', $data['access_token']);\r\n         return $data;\r\n     })\r\n     ->GET('http://term.ie/oauth/example/echo_api.php')\r\n     ->then(function($data) {\r\n           var_dump($data);\r\n      });\r\n```\r\nBe careful, however. As promises go, ```then()``` calls are expected to return data to pass on to the next step. \r\n\r\nWhat if you wanted to make multiple API calls at arbitrary points in your code? Oma makes it easy to break up the flow into different sections:\r\n```php\r\n# use your preferred autoloader\r\nuse ohmy\\Auth1;\r\n$termie = Auth1::init(2)\r\n               ->set('key', 'key')\r\n               ->set('secret', 'secret')\r\n               ->request('http://term.ie/oauth/example/request_token.php')\r\n               ->access('http://term.ie/oauth/example/access_token.php');\r\n              \r\n$termie->GET('http://term.ie/oauth/example/echo_api.php?foo=bar')\r\n        ->then(function($data) {\r\n             var_dump($data);\r\n        });\r\n\r\n# sometime later\r\n$termie->POST('http://term.ie/oauth/example/echo_api.php?bar=baz')\r\n        ->then(function($data) {\r\n             var_dump($data);\r\n        });\r\n```\r\nThis is just a small sample of what Oma is capable of. For 3-legged OAuth1.0a/2.0 examples, head over to the [examples](https://github.com/sudocode/ohmy-auth/tree/master/examples).\r\n\r\n### Installing \r\nOAuth only needs PHP 5.3 and Curl, so you should be able to drop it into any setup you have. If you'd like to use composer, you can just add the following entry to your ```composer.json```:\r\n```\r\n\"ohmy/auth\": \"*\"\r\n```\r\n### Author and Licensing\r\nohmy-auth was developed by Daniel Park ([@sudocoder](https://twitter.com/sudocoder)), a Platforms developer at Yahoo Inc. ohmy-auth has been approved for open-source under the New BSD license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}